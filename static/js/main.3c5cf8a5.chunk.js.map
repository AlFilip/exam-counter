{"version":3,"sources":["Button.tsx","Display.tsx","Counter.tsx","Settings.tsx","reducer.ts","getWindowDimention.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","disabled","onClick","callback","title","Display","value","editMode","error","alert","spanValue","editModeSpanClassName","Counter","React","memo","min","max","currentValue","setCurrentValue","reachedMax","reachedMin","newValue","prevProps","nextProps","Settings","inputMaxClassName","inputMinClassName","type","onChange","e","currentTarget","setMax","setMin","buttonCallBack","SET_LIMITS","SET_CURRENT_VALUE","SET_CURRENT_MIN_VALUE","SET_CURRENT_MAX_VALUE","reducer","state","action","limits","currentMinValue","currentMaxValue","getWindowDimensions","window","width","innerWidth","height","innerHeight","App","appStyles","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","useReducer","dispatch","style","setMinCurrentValueAC","setMaxCurrentValueAC","setCurrentValueAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c5cf8a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ButtonPropsType = {\r\n    callback: () => void\r\n    title: string\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    const onClick = () => props.callback()\r\n    return <button className={'btn'} disabled={props.disabled} onClick={onClick}>{props.title}</button>\r\n}","import React from \"react\";\r\n\r\ntype DisplayPropsType = {\r\n    value: number\r\n    alert: boolean\r\n    error?: boolean\r\n    editMode: boolean\r\n}\r\nexport const Display: React.FC<DisplayPropsType> = ({\r\n                                                        value,\r\n                                                        editMode,\r\n                                                        error,\r\n                                                        ...props\r\n                                                    }) => {\r\n    const alert = props.alert ? 'alert' : ''\r\n    const spanValue = error ? 'Incorrect input' : 'Enter Values'\r\n    const editModeSpanClassName = `display spanText ${error ? 'error' : ''}`\r\n\r\n    return editMode\r\n        ? <span className={editModeSpanClassName}>{spanValue}</span>\r\n        : <span className={`display ${alert}`}>{value}</span>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Button} from \"./Button\";\r\nimport {Display} from \"./Display\";\r\n\r\nexport type CounterPropsType = {\r\n    min: number\r\n    max: number\r\n    error: boolean\r\n    currentValue: number\r\n    setCurrentValue: (newValue: number) => void\r\n    editMode: boolean\r\n}\r\n\r\nconst Counter =\r\n    React.memo(\r\n        ({\r\n             min,\r\n             max,\r\n             currentValue,\r\n             setCurrentValue,\r\n             ...props\r\n\r\n         }: CounterPropsType) => {\r\n            const incValue = () => {\r\n                if (currentValue < max) {\r\n                    const newValue: (v: number) => number = (currentValue) => currentValue + 1\r\n                    setCurrentValue(newValue(currentValue))\r\n                }\r\n            }\r\n\r\n            const resetValue = () => setCurrentValue(min)\r\n\r\n            const reachedMax = currentValue === max\r\n            const reachedMin = currentValue === min\r\n\r\n            return (\r\n                <div className={'counter'}>\r\n                    <Display value={currentValue} alert={reachedMax} error={props.error} editMode={props.editMode}/>\r\n\r\n                    <div className={'buttons'}>\r\n                        <Button title={'Inc'} callback={incValue} disabled={reachedMax || props.error}/>\r\n                        <Button title={'Reset'} callback={resetValue} disabled={reachedMin || props.error}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        , ((prevProps, nextProps) => {\r\n            return prevProps.currentValue === nextProps.currentValue\r\n                && prevProps.error === nextProps.error\r\n                && prevProps.editMode === nextProps.editMode\r\n        }))\r\n\r\nexport default Counter;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype SettingsPropsType = {\r\n    min: number\r\n    max: number\r\n    buttonCallBack: (editMode: boolean) => void\r\n    setMin: (min: number) => void\r\n    setMax: (max: number) => void\r\n    error?: boolean\r\n}\r\n\r\nexport const Settings: React.FC<SettingsPropsType> =\r\n    React.memo(\r\n        (props) => {\r\n            const onButtonSetPress = () => {\r\n                props.buttonCallBack(false)\r\n            }\r\n\r\n            const onMinChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n                e.currentTarget && props.setMin(+e.currentTarget.value)\r\n            }\r\n\r\n            const onMAxChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n                e.currentTarget && props.setMax(+e.currentTarget.value)\r\n            }\r\n            const inputMaxClassName = props.max <= props.min ? 'input inputError' : 'input'\r\n            const inputMinClassName = props.max <= props.min || props.min < 0 ? 'input inputError' : 'input'\r\n\r\n\r\n            return <div className={'counter'}>\r\n                <div className={'settingsInputsField'}>\r\n                    <div>\r\n                        <span>max</span>\r\n                        <input className={inputMaxClassName} type={'number'} onChange={onMAxChange} value={props.max}/>\r\n                    </div>\r\n                    <div>\r\n                        <span>start</span>\r\n                        <input className={inputMinClassName} type={'number'} onChange={onMinChange} value={props.min}/>\r\n                    </div>\r\n                </div>\r\n                <div className={'buttons'}>\r\n                    <Button title={'Set'} disabled={props.error} callback={onButtonSetPress}/>\r\n                </div>\r\n            </div>\r\n        }\r\n        , (prevProps, nextProps) => {\r\n            return prevProps.max === nextProps.max\r\n                && prevProps.min === nextProps.min\r\n        })","export const SET_LIMITS = 'SET_BUTTON'\r\nexport const SET_CURRENT_VALUE = 'SET_CURRENT_VALUE'\r\nexport const SET_CURRENT_MIN_VALUE = 'SET_CURRENT_MIN_VALUE'\r\nexport const SET_CURRENT_MAX_VALUE = 'SET_CURRENT_MAX_VALUE'\r\n\r\ntype limitsType = {\r\n    min: number\r\n    max: number\r\n}\r\ntype StateType = {\r\n    limits: limitsType\r\n    currentValue: number\r\n    error: boolean\r\n    editMode: boolean\r\n}\r\n\r\nexport const reducer = (state: StateType, action: ActionType) => {\r\n    switch (action.type) {\r\n        case SET_LIMITS:\r\n            return {\r\n                ...state,\r\n                currentValue: state.limits.min,\r\n                editMode: false\r\n            }\r\n        case SET_CURRENT_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                limits: {...state.limits, min: action.currentMinValue},\r\n                editMode: true,\r\n                error: action.currentMinValue < 0 || action.currentMinValue >= state.limits.max\r\n            }\r\n        case SET_CURRENT_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                limits: {...state.limits, max: action.currentMaxValue},\r\n                editMode: true,\r\n                error: action.currentMaxValue < state.limits.min\r\n                    || action.currentMaxValue <= state.limits.min\r\n            }\r\n        case SET_CURRENT_VALUE:\r\n            return {...state, currentValue: action.currentValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = setLimitsACType | setCurrentValueACType | SetCurrentMinValueType | setMaxCurrentValueType\r\n\r\ntype SetCurrentMinValueType = ReturnType<typeof setMinCurrentValueAC>\r\nexport const setMinCurrentValueAC = (newValue: number) => ({\r\n    type: SET_CURRENT_MIN_VALUE,\r\n    currentMinValue: newValue\r\n} as const)\r\n\r\ntype setMaxCurrentValueType = ReturnType<typeof setMaxCurrentValueAC>\r\nexport const setMaxCurrentValueAC = (newValue: number) => ({\r\n    type: SET_CURRENT_MAX_VALUE,\r\n    currentMaxValue: newValue\r\n} as const)\r\n\r\ntype setLimitsACType = ReturnType<typeof setLimitsAC>\r\nexport const setLimitsAC = () => ({type: SET_LIMITS} as const)\r\n\r\ntype setCurrentValueACType = ReturnType<typeof setCurrentValueAC>\r\nexport const setCurrentValueAC = (value: number) => ({type: SET_CURRENT_VALUE, currentValue: value} as const)\r\n","import {useState, useEffect} from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const {innerWidth: width, innerHeight: height} = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import React, {useReducer} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport {Settings} from \"./Settings\";\nimport {\n    reducer,\n    setCurrentValueAC,\n    setLimitsAC,\n    setMaxCurrentValueAC,\n    setMinCurrentValueAC\n} from \"./reducer\";\nimport useWindowDimensions from \"./getWindowDimention\";\n\n\nfunction App() {\n    const appStyles = useWindowDimensions();\n    const [state, dispatch] = useReducer(reducer, {\n        limits: {\n            min: 0,\n            max: 5\n        },\n        currentValue: 0,\n        error: false,\n        editMode: false,\n    })\n\n    const changeMin = (newValue: number) => {\n        dispatch(setMinCurrentValueAC(newValue))\n    }\n    const changeMax = (newValue: number) => {\n        dispatch(setMaxCurrentValueAC(newValue))\n    }\n\n    const onSetPressed = () => dispatch(setLimitsAC())\n\n    const setCurrentValue = (value: number) => {\n        dispatch(setCurrentValueAC(value))\n    }\n\n    return (\n        <div className={'App'} style={appStyles}>\n            <Settings min={state.limits.min}\n                      max={state.limits.max}\n                      setMin={changeMin}\n                      setMax={changeMax}\n                      buttonCallBack={onSetPressed}\n                      error={state.error}/>\n\n            <Counter min={state.limits.min}\n                     max={state.limits.max}\n                     error={state.error}\n                     currentValue={state.currentValue}\n                     setCurrentValue={setCurrentValue}\n                     editMode={state.editMode}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}